import logging
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=getattr(logging, Config.LOG_LEVEL))
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
bot = AsyncTeleBot(Config.BOT_TOKEN, parse_mode='HTML')

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def create_start_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("üåç –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"))
    return markup

def create_answer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row(types.KeyboardButton("–∞"), types.KeyboardButton("–±"), types.KeyboardButton("–≤"))
    return markup

@bot.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help"""
    await bot.send_message(
        message.chat.id,
        "üåç <b>–¢–µ—Å—Ç: –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–±–µ —É–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞?</b>\n\n"
        "–£–∑–Ω–∞–π, –≥–æ—Ç–æ–≤–∞ –ª–∏ —Ç—ã –∫ –Ω–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é —Å–≤–æ–±–æ–¥—ã, —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –¥–æ—Ö–æ–¥–∞ ‚Äî –ø—Ä—è–º–æ –∏–∑ –¥–æ–º–∞.",
        reply_markup=create_start_keyboard(),
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üåç –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_test(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
    user_id = message.from_user.id
    user_data[user_id] = {
        'answers': [],
        'current_question': 0,
        'username': message.from_user.username,
        'full_name': message.from_user.full_name,
        'score': 0
    }
    
    await ask_question(message, user_id)

async def ask_question(message: types.Message, user_id: int):
    """–ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    current_question = user_data[user_id]['current_question']
    
    if current_question < len(Config.TEST_QUESTIONS):
        await bot.send_message(
            message.chat.id,
            Config.TEST_QUESTIONS[current_question],
            reply_markup=create_answer_keyboard()
        )
    else:
        await finish_test(message, user_id)

@bot.message_handler(func=lambda message: message.text.lower() in Config.ANSWER_SCORES.keys())
async def process_answer(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if user_id not in user_data:
        await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ 'üåç –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    
    answer = message.text.lower()
    user_data[user_id]['score'] += Config.ANSWER_SCORES[answer]
    user_data[user_id]['answers'].append(answer)
    user_data[user_id]['current_question'] += 1
    
    await ask_question(message, user_id)

@bot.message_handler(func=lambda message: True)
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç
    if user_id in user_data and user_data[user_id]['current_question'] < len(Config.TEST_QUESTIONS):
        await bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=create_answer_keyboard()
        )
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å" –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏
    elif message.text.lower() in ["–Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", "–æ–ø—Ä–æ—Å", "—Ç–µ—Å—Ç"]:
        await start_test(message)
    else:
        await bot.send_message(
            message.chat.id,
            "–ù–∞–∂–º–∏—Ç–µ 'üåç –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=create_start_keyboard()
        )

async def finish_test(message: types.Message, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user_info = user_data[user_id]
    total_score = user_info['score']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = "üí´ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:</b>\n\n"
    
    for score_range, result_description in Config.TEST_RESULTS.items():
        if score_range[0] <= total_score <= score_range[1]:
            result_text += result_description + "\n\n"
            break
    
    result_text += f"üìä <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} –±–∞–ª–ª–æ–≤</b>\n\n"
    result_text += "üíå –ì–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É?\n\n"
    result_text += Config.CONTACT_TEXT
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        message.chat.id,
        result_text,
        parse_mode='HTML',
        reply_markup=create_start_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–º–∏–Ω—É
    try:
        admin_text = f"üìä –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:\n\n"
        admin_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_info['username'] or '–Ω–µ—Ç'}\n"
        admin_text += f"üÜî ID: {user_id}\n"
        admin_text += f"üìõ –ò–º—è: {user_info['full_name']}\n"
        admin_text += f"üéØ –ë–∞–ª–ª—ã: {total_score}\n"
        admin_text += f"üìù –û—Ç–≤–µ—Ç—ã: {', '.join(user_info['answers'])}"
        
        await bot.send_message(Config.ADMIN_CHAT_ID, admin_text)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω—É {Config.ADMIN_CHAT_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_data[user_id]
    logger.info(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def get_bot_instance():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main.py"""
    return bot